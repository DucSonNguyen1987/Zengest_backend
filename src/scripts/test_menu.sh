#!/bin/bash

# Script de test pour les routes du menu - Zengest
BASE_URL="http://localhost:3000"
API_URL="${BASE_URL}/api"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

print_info() {
    echo -e "${BLUE}üîç $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_debug() {
    echo -e "${PURPLE}üêõ DEBUG: $1${NC}"
}

# Variables globales
TOKEN=""
MENU_ITEM_ID=""
NEW_ITEM_ID=""

echo -e "${BLUE}üöÄ Tests des routes Menu - Zengest${NC}"
echo "================================================"

# 1. Connexion pour obtenir un token
print_info "1. Connexion en tant que manager..."
RESPONSE=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{
    "email": "manager@bistrot-zengest.com",
    "password": "Manager123!"
  }' \
  "${API_URL}/auth/login")

if [[ $RESPONSE == *"success\":true"* ]]; then
    TOKEN=$(echo $RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4)
    print_result 0 "Connexion r√©ussie"
    echo "   Token: ${TOKEN:0:50}..."
else
    print_result 1 "√âchec de la connexion"
    echo "   R√©ponse: $RESPONSE"
    exit 1
fi

echo ""

# 2. Test de sant√© de l'API
print_info "2. Test de sant√© de l'API..."
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${API_URL}/health")
if [ "$HTTP_CODE" -eq 200 ]; then
    print_result 0 "API accessible (HTTP $HTTP_CODE)"
else
    print_result 1 "API non accessible (HTTP $HTTP_CODE)"
    exit 1
fi

echo ""

# 3. R√©cup√©ration de tous les items du menu (public)
print_info "3. R√©cup√©ration de tous les items du menu (public)..."
RESPONSE=$(curl -s -X GET "${API_URL}/menu")

if [[ $RESPONSE == *"success\":true"* ]]; then
    print_result 0 "Liste du menu r√©cup√©r√©e"
    ITEM_COUNT=$(echo $RESPONSE | grep -o '"name"' | wc -l)
    echo "   Nombre d'items trouv√©s: $ITEM_COUNT"
    
    # Extraire le premier item ID pour les tests suivants
    if command -v python3 &> /dev/null; then
        MENU_ITEM_ID=$(python3 -c "
import json
try:
    data = json.loads('''$RESPONSE''')
    items = data.get('data', {}).get('menuItems', [])
    if items and len(items) > 0:
        print(items[0]['_id'])
except:
    pass
" 2>/dev/null)
    fi
    
    if [ ! -z "$MENU_ITEM_ID" ]; then
        echo "   Premier item ID: $MENU_ITEM_ID"
    else
        echo "   ‚ö†Ô∏è  Aucun item trouv√©"
    fi
else
    print_result 1 "√âchec de r√©cup√©ration du menu"
    echo "   R√©ponse: $RESPONSE"
fi

echo ""

# 4. Test des filtres par cat√©gorie
print_info "4. Test des filtres par cat√©gorie..."
CATEGORY_RESPONSE=$(curl -s -X GET "${API_URL}/menu?category=mains")

if [[ $CATEGORY_RESPONSE == *"success\":true"* ]]; then
    print_result 0 "Filtrage par cat√©gorie fonctionne"
    MAINS_COUNT=$(echo $CATEGORY_RESPONSE | grep -o '"name"' | wc -l)
    echo "   Items dans 'mains': $MAINS_COUNT"
else
    print_result 1 "√âchec du filtrage par cat√©gorie"
    echo "   R√©ponse: $CATEGORY_RESPONSE"
fi

echo ""

# 5. Test de recherche
print_info "5. Test de recherche d'items..."
SEARCH_RESPONSE=$(curl -s -X GET "${API_URL}/menu/search?q=burger")

if [[ $SEARCH_RESPONSE == *"success\":true"* ]]; then
    print_result 0 "Recherche fonctionne"
    SEARCH_COUNT=$(echo $SEARCH_RESPONSE | grep -o '"name"' | wc -l)
    echo "   R√©sultats pour 'burger': $SEARCH_COUNT items"
else
    print_result 1 "√âchec de la recherche"
    echo "   R√©ponse: $SEARCH_RESPONSE"
fi

echo ""

# 6. Test des cat√©gories avec compteurs
print_info "6. R√©cup√©ration des cat√©gories avec compteurs..."
CATEGORIES_RESPONSE=$(curl -s -X GET "${API_URL}/menu/categories")

if [[ $CATEGORIES_RESPONSE == *"success\":true"* ]]; then
    print_result 0 "Cat√©gories r√©cup√©r√©es"
    if command -v python3 &> /dev/null; then
        CAT_COUNT=$(python3 -c "
import json
try:
    data = json.loads('''$CATEGORIES_RESPONSE''')
    categories = data.get('data', {}).get('categories', [])
    print(len(categories))
except:
    print(0)
" 2>/dev/null)
        echo "   Nombre de cat√©gories: $CAT_COUNT"
    fi
else
    print_result 1 "√âchec r√©cup√©ration des cat√©gories"
    echo "   R√©ponse: $CATEGORIES_RESPONSE"
fi

echo ""

# 7. R√©cup√©ration d'un item sp√©cifique
if [ ! -z "$MENU_ITEM_ID" ]; then
    print_info "7. R√©cup√©ration d'un item sp√©cifique: $MENU_ITEM_ID"
    ITEM_RESPONSE=$(curl -s -X GET "${API_URL}/menu/$MENU_ITEM_ID")

    if [[ $ITEM_RESPONSE == *"success\":true"* ]]; then
        print_result 0 "Item sp√©cifique r√©cup√©r√©"
        if command -v python3 &> /dev/null; then
            ITEM_NAME=$(python3 -c "
import json
try:
    data = json.loads('''$ITEM_RESPONSE''')
    item = data.get('data', {}).get('menuItem', {})
    print(item.get('name', 'N/A'))
except:
    print('N/A')
" 2>/dev/null)
            echo "   Nom de l'item: $ITEM_NAME"
        fi
    else
        print_result 1 "√âchec r√©cup√©ration de l'item sp√©cifique"
        echo "   R√©ponse: $ITEM_RESPONSE"
    fi
else
    print_warning "7. Aucun item ID disponible pour le test"
fi

echo ""

# 8. Test de cr√©ation d'un nouvel item (avec authentification)
print_info "8. Cr√©ation d'un nouvel item de menu..."

CREATE_RESPONSE=$(curl -s -X POST \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test Burger API",
    "description": "Burger cr√©√© via script de test automatis√©",
    "category": "mains",
    "subcategory": "burger",
    "priceVariants": [
      {
        "size": "portion",
        "price": 15.50,
        "isDefault": true
      }
    ],
    "dietary": {
      "isVegetarian": false,
      "isVegan": false,
      "isGlutenFree": false,
      "isSpicy": false,
      "spicyLevel": 0
    },
    "tags": ["test", "api"],
    "displayOrder": 999,
    "isActive": true
  }' \
  "${API_URL}/menu")

if [[ $CREATE_RESPONSE == *"success\":true"* ]]; then
    print_result 0 "Nouvel item cr√©√© avec succ√®s"
    if command -v python3 &> /dev/null; then
        NEW_ITEM_ID=$(python3 -c "
import json
try:
    data = json.loads('''$CREATE_RESPONSE''')
    item = data.get('data', {}).get('menuItem', {})
    print(item.get('_id', ''))
except:
    pass
" 2>/dev/null)
    fi
    
    if [ ! -z "$NEW_ITEM_ID" ]; then
        echo "   Nouvel item ID: $NEW_ITEM_ID"
        MENU_ITEM_ID="$NEW_ITEM_ID"  # Utiliser le nouvel item pour les tests suivants
    fi
else
    print_result 1 "√âchec de cr√©ation de l'item"
    echo "   R√©ponse: $CREATE_RESPONSE"
fi

echo ""

# 9. Test de mise √† jour d'un item
if [ ! -z "$MENU_ITEM_ID" ]; then
    print_info "9. Mise √† jour de l'item: $MENU_ITEM_ID"
    UPDATE_RESPONSE=$(curl -s -X PUT \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json" \
      -d '{
        "description": "Description mise √† jour via script de test",
        "tags": ["test", "api", "updated"]
      }' \
      "${API_URL}/menu/$MENU_ITEM_ID")

    if [[ $UPDATE_RESPONSE == *"success\":true"* ]]; then
        print_result 0 "Item mis √† jour avec succ√®s"
    else
        print_result 1 "√âchec mise √† jour de l'item"
        echo "   R√©ponse: $UPDATE_RESPONSE"
    fi
else
    print_warning "9. Aucun item ID disponible pour la mise √† jour"
fi

echo ""

# 10. Test de mise √† jour de la disponibilit√©
if [ ! -z "$MENU_ITEM_ID" ]; then
    print_info "10. Mise √† jour de la disponibilit√©..."
    AVAILABILITY_RESPONSE=$(curl -s -X PATCH \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json" \
      -d '{
        "isAvailable": false,
        "isOutOfStock": true
      }' \
      "${API_URL}/menu/$MENU_ITEM_ID/availability")

    if [[ $AVAILABILITY_RESPONSE == *"success\":true"* ]]; then
        print_result 0 "Disponibilit√© mise √† jour"
        echo "   Statut: Non disponible, en rupture de stock"
    else
        print_result 1 "√âchec mise √† jour disponibilit√©"
        echo "   R√©ponse: $AVAILABILITY_RESPONSE"
    fi
else
    print_warning "10. Aucun item ID pour test de disponibilit√©"
fi

echo ""

# 11. Test de mise √† jour des prix
if [ ! -z "$MENU_ITEM_ID" ]; then
    print_info "11. Mise √† jour des prix..."
    PRICE_RESPONSE=$(curl -s -X PATCH \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json" \
      -d '{
        "priceVariants": [
          {
            "size": "portion",
            "price": 16.50,
            "isDefault": true
          },
          {
            "size": "menu",
            "price": 19.50,
            "isDefault": false
          }
        ]
      }' \
      "${API_URL}/menu/$MENU_ITEM_ID/price")

    if [[ $PRICE_RESPONSE == *"success\":true"* ]]; then
        print_result 0 "Prix mis √† jour avec succ√®s"
        echo "   Nouvelle gamme de prix: 16.50‚Ç¨ - 19.50‚Ç¨"
    else
        print_result 1 "√âchec mise √† jour des prix"
        echo "   R√©ponse: $PRICE_RESPONSE"
    fi
else
    print_warning "11. Aucun item ID pour test de prix"
fi

echo ""

# 12. Test d'items similaires
if [ ! -z "$MENU_ITEM_ID" ]; then
    print_info "12. R√©cup√©ration d'items similaires..."
    RELATED_RESPONSE=$(curl -s -X GET \
      -H "Authorization: Bearer $TOKEN" \
      "${API_URL}/menu/$MENU_ITEM_ID/related")

    if [[ $RELATED_RESPONSE == *"success\":true"* ]]; then
        print_result 0 "Items similaires r√©cup√©r√©s"
        if command -v python3 &> /dev/null; then
            RELATED_COUNT=$(python3 -c "
import json
try:
    data = json.loads('''$RELATED_RESPONSE''')
    items = data.get('data', {}).get('relatedItems', [])
    print(len(items))
except:
    print(0)
" 2>/dev/null)
            echo "   Nombre d'items similaires: $RELATED_COUNT"
        fi
    else
        print_result 1 "√âchec r√©cup√©ration items similaires"
        echo "   R√©ponse: $RELATED_RESPONSE"
    fi
else
    print_warning "12. Aucun item ID pour test d'items similaires"
fi

echo ""

# 13. Test avec utilisateur non autoris√© (staff)
print_info "13. Test avec utilisateur staff (droits limit√©s)..."
STAFF_RESPONSE=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{
    "email": "sophie.salle@bistrot-zengest.com",
    "password": "Staff123!"
  }' \
  "${API_URL}/auth/login")

if [[ $STAFF_RESPONSE == *"success\":true"* ]]; then
    STAFF_TOKEN=$(echo $STAFF_RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4)
    
    # Tenter de cr√©er un item avec un staff (devrait √©chouer)
    STAFF_CREATE=$(curl -s -X POST \
      -H "Authorization: Bearer $STAFF_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{
        "name": "Test Staff Item",
        "category": "mains",
        "priceVariants": [{"size": "portion", "price": 10}]
      }' \
      "${API_URL}/menu")

    if [[ $STAFF_CREATE == *"success\":false"* ]]; then
        print_result 0 "Contr√¥le d'acc√®s staff fonctionne"
        STAFF_ERROR=$(echo $STAFF_CREATE | grep -o '"message":"[^"]*' | cut -d'"' -f4)
        echo "   Message: $STAFF_ERROR"
    else
        print_result 1 "Contr√¥le d'acc√®s staff d√©faillant"
        echo "   Le staff peut cr√©er des items (probl√®me de s√©curit√©)"
    fi
else
    print_warning "13. Impossible de se connecter en tant que staff"
    echo "   R√©ponse: $STAFF_RESPONSE"
fi

echo ""

# 14. Test de validation (donn√©es invalides)
print_info "14. Test de validation avec donn√©es invalides..."
VALIDATION_RESPONSE=$(curl -s -X POST \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "",
    "category": "invalid_category",
    "priceVariants": []
  }' \
  "${API_URL}/menu")

if [[ $VALIDATION_RESPONSE == *"success\":false"* ]]; then
    print_result 0 "Validation des erreurs fonctionne"
    ERROR_MSG=$(echo $VALIDATION_RESPONSE | grep -o '"message":"[^"]*' | cut -d'"' -f4)
    echo "   Message d'erreur: $ERROR_MSG"
else
    print_result 1 "Validation des erreurs ne fonctionne pas"
    echo "   R√©ponse inattendue: $VALIDATION_RESPONSE"
fi

echo ""

# 15. Test de recherche avec filtres alimentaires
print_info "15. Test de recherche avec filtres alimentaires..."
VEGETARIAN_RESPONSE=$(curl -s -X GET "${API_URL}/menu?isVegetarian=true")

if [[ $VEGETARIAN_RESPONSE == *"success\":true"* ]]; then
    print_result 0 "Filtrage v√©g√©tarien fonctionne"
    if command -v python3 &> /dev/null; then
        VEG_COUNT=$(python3 -c "
import json
try:
    data = json.loads('''$VEGETARIAN_RESPONSE''')
    items = data.get('data', {}).get('menuItems', [])
    print(len(items))
except:
    print(0)
" 2>/dev/null)
        echo "   Items v√©g√©tariens: $VEG_COUNT"
    fi
else
    print_result 1 "√âchec du filtrage v√©g√©tarien"
    echo "   R√©ponse: $VEGETARIAN_RESPONSE"
fi

echo ""

# 16. Test de filtrage par prix
print_info "16. Test de filtrage par prix..."
PRICE_FILTER_RESPONSE=$(curl -s -X GET "${API_URL}/menu?minPrice=10&maxPrice=20")

if [[ $PRICE_FILTER_RESPONSE == *"success\":true"* ]]; then
    print_result 0 "Filtrage par prix fonctionne"
    if command -v python3 &> /dev/null; then
        PRICE_COUNT=$(python3 -c "
import json
try:
    data = json.loads('''$PRICE_FILTER_RESPONSE''')
    items = data.get('data', {}).get('menuItems', [])
    print(len(items))
except:
    print(0)
" 2>/dev/null)
        echo "   Items entre 10‚Ç¨ et 20‚Ç¨: $PRICE_COUNT"
    fi
else
    print_result 1 "√âchec du filtrage par prix"
    echo "   R√©ponse: $PRICE_FILTER_RESPONSE"
fi

echo ""

# 17. Nettoyage et suppression de l'item de test
if [ ! -z "$NEW_ITEM_ID" ]; then
    print_info "17. Nettoyage: suppression de l'item de test..."
    DELETE_RESPONSE=$(curl -s -X DELETE \
      -H "Authorization: Bearer $TOKEN" \
      "${API_URL}/menu/$NEW_ITEM_ID")
    
    if [[ $DELETE_RESPONSE == *"success\":true"* ]]; then
        print_result 0 "Item de test supprim√© (d√©sactiv√©)"
    else
        print_result 1 "√âchec suppression item de test"
        echo "   R√©ponse: $DELETE_RESPONSE"
    fi
else
    print_warning "17. Aucun item de test √† supprimer"
fi

echo ""

# 18. Statistiques finales
print_info "18. Statistiques finales du menu..."

# Compter les items par cat√©gorie
FINAL_STATS=$(curl -s -X GET "${API_URL}/menu/categories")
if [[ $FINAL_STATS == *"success\":true"* ]]; then
    echo "   üìä Statistiques par cat√©gorie:"
    if command -v python3 &> /dev/null; then
        python3 -c "
import json
try:
    data = json.loads('''$FINAL_STATS''')
    categories = data.get('data', {}).get('categories', [])
    for cat in categories:
        print(f'      {cat[\"_id\"]}: {cat[\"count\"]} items (prix moyen: {cat[\"avgPrice\"]:.2f}‚Ç¨)')
except Exception as e:
    print(f'      Erreur analyse: {e}')
" 2>/dev/null
    fi
fi

echo ""
echo -e "${BLUE}================================================${NC}"
echo -e "${GREEN}üèÅ Tests du menu termin√©s !${NC}"

# R√©sum√© des fonctionnalit√©s test√©es
echo ""
echo "üìà R√©sum√© des fonctionnalit√©s test√©es:"
echo "   ‚úÖ API Status: Op√©rationnelle"
echo "   ‚úÖ Authentification: Fonctionnelle"
echo "   ‚úÖ CRUD Operations: Test√©es"
echo "   ‚úÖ Recherche: Fonctionnelle"
echo "   ‚úÖ Filtres: Actifs (cat√©gorie, prix, alimentaire)"
echo "   ‚úÖ Validations: Actives"
echo "   ‚úÖ Contr√¥le d'acc√®s: V√©rifi√©"
echo "   ‚úÖ Gestion des prix: Multiple variantes"
echo "   ‚úÖ Gestion des stocks: Disponibilit√©"
echo ""
echo "üöÄ Votre API Menu est op√©rationnelle !"
echo ""
echo "üí° Fonctionnalit√©s disponibles:"
echo "   - Menu complet bas√© sur la carte Pause Caf√©"
echo "   - Recherche textuelle intelligente"
echo "   - Filtres par cat√©gorie, prix, restrictions alimentaires"
echo "   - Gestion des variantes de prix (tailles)"
echo "   - Gestion de la disponibilit√© et des stocks"
echo "   - Items similaires/recommandations"
echo "   - Validation compl√®te des donn√©es"
echo "   - Contr√¥les d'acc√®s par r√¥le"
echo ""
echo "üîó Endpoints principaux test√©s:"
echo "   GET /api/menu - Liste compl√®te"
echo "   GET /api/menu/search?q=terme - Recherche"
echo "   GET /api/menu/categories - Cat√©gories"
echo "   GET /api/menu?category=mains - Filtrage"
echo "   POST /api/menu - Cr√©ation (management)"
echo "   PUT /api/menu/:id - Modification"
echo "   PATCH /api/menu/:id/availability - Disponibilit√©"
echo "   PATCH /api/menu/:id/price - Prix"