const Order = require('../models/Order');
const MenuItem = require('../models/MenuItem');
const FloorPlan = require('../models/FloorPlan');
const Restaurant = require('../models/Restaurant');
const { createPagination } = require('../utils/pagination');
const { USER_ROLES } = require('../utils/constants');

/**
 * Contr√¥leur pour la gestion des commandes - VERSION CORRIG√âE
 * Avec validation restaurant robuste et gestion d'erreurs compl√®te
 */

/**
 * Fonction utilitaire de validation restaurant
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @returns {boolean} - true si valide, false sinon
 */
const validateUserRestaurant = (req, res) => {
  if (!req.user.restaurantId) {
    res.status(400).json({
      success: false,
      message: 'Utilisateur non assign√© √† un restaurant',
      code: 'NO_RESTAURANT_ASSIGNED',
      details: 'Contactez un administrateur pour assigner un restaurant √† votre compte'
    });
    return false;
  }
  return true;
};

/**
 * Fonction utilitaire de validation permissions restaurant
 * @param {Object} req - Request object
 * @param {Object} restaurantId - ID du restaurant √† v√©rifier
 * @returns {boolean} - true si autoris√©, false sinon
 */
const hasRestaurantAccess = (req, restaurantId) => {
  if (req.user.role === 'admin') {
    return true;
  }
  
  if (!req.user.restaurantId) {
    return false;
  }
  
  const userRestaurantId = req.user.restaurantId.toString();
  const targetRestaurantId = (restaurantId?._id || restaurantId).toString();
  
  return userRestaurantId === targetRestaurantId;
};

/**
 * R√©cup√©rer toutes les commandes avec pagination et filtres
 * GET /orders
 */
exports.getAllOrders = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      status,
      sortBy = 'timestamps.ordered',
      sortOrder = 'desc',
      tableNumber,
      assignedServer,
      dateFrom,
      dateTo
    } = req.query;

    console.log('getAllOrders appel√© par:', req.user?.email, 'r√¥le:', req.user?.role);
    console.log('Param√®tres:', { page, limit, status, tableNumber });

    // Validation restaurant pour non-admin
    if (req.user.role !== 'admin' && !validateUserRestaurant(req, res)) {
      return;
    }

    // Construire le filtre
    const filter = {};

    // Filtrer par restaurant selon le r√¥le
    if (req.user.role !== 'admin') {
      filter.restaurantId = req.user.restaurantId;
      console.log('Filtrage par restaurant:', req.user.restaurantId);
    }

    if (status) filter.status = status;
    if (tableNumber) filter.tableNumber = tableNumber;
    if (assignedServer) filter.assignedServer = assignedServer;

    // Filtres de date
    if (dateFrom || dateTo) {
      filter['timestamps.ordered'] = {};
      if (dateFrom) filter['timestamps.ordered'].$gte = new Date(dateFrom);
      if (dateTo) filter['timestamps.ordered'].$lte = new Date(dateTo);
    }

    const pagination = createPagination(page, limit, 0);

    // Requ√™te avec pagination
    const orders = await Order.find(filter)
      .populate('items.menuItem', 'name category priceVariants basePrice')
      .populate('assignedServer', 'firstName lastName')
      .populate('restaurantId', 'name')
      .sort({ [sortBy]: sortOrder === 'desc' ? -1 : 1 })
      .limit(pagination.limit)
      .skip(pagination.skip);

    const total = await Order.countDocuments(filter);
    const finalPagination = createPagination(page, limit, total);

    console.log('Commandes r√©cup√©r√©es:', { 
      count: orders.length, 
      total, 
      restaurant: req.user.role === 'admin' ? 'TOUS' : req.user.restaurantId 
    });

    res.json({
      success: true,
      data: {
        orders,
        pagination: finalPagination
      }
    });

  } catch (error) {
    console.error('Erreur getAllOrders:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration des commandes',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * R√©cup√©rer les commandes actives
 * GET /orders/active
 */
exports.getActiveOrders = async (req, res) => {
  try {
    console.log('getActiveOrders appel√© par:', req.user?.email);

    // Validation restaurant pour non-admin
    if (req.user.role !== 'admin' && !validateUserRestaurant(req, res)) {
      return;
    }

    const filter = {
      status: { $in: ['pending', 'confirmed', 'preparing', 'ready'] }
    };

    if (req.user.role !== 'admin') {
      filter.restaurantId = req.user.restaurantId;
    }

    const orders = await Order.find(filter)
      .populate('items.menuItem', 'name category basePrice')
      .populate('assignedServer', 'firstName lastName')
      .sort({ 'timestamps.ordered': 1 });

    console.log('Commandes actives trouv√©es:', orders.length);

    res.json({
      success: true,
      data: { orders }
    });

  } catch (error) {
    console.error('Erreur getActiveOrders:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des commandes actives'
    });
  }
};

/**
 * R√©cup√©rer une commande sp√©cifique
 * GET /orders/:id
 */
exports.getOrderById = async (req, res) => {
  try {
    const { id } = req.params;
    console.log('getOrderById appel√© pour:', id, 'par:', req.user?.email);

    const order = await Order.findById(id)
      .populate('items.menuItem', 'name category priceVariants basePrice')
      .populate('assignedServer', 'firstName lastName email')
      .populate('restaurantId', 'name address')
      .populate('floorPlanId', 'name');

    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Commande non trouv√©e'
      });
    }

    // V√©rification permissions restaurant robuste
    if (!hasRestaurantAccess(req, order.restaurantId)) {
      console.log('Acc√®s refus√© - Restaurant:', {
        userRole: req.user.role,
        userRestaurant: req.user.restaurantId,
        orderRestaurant: order.restaurantId?._id || order.restaurantId
      });
      
      return res.status(403).json({
        success: false,
        message: 'Acc√®s non autoris√© √† cette commande'
      });
    }

    console.log('Commande trouv√©e:', {
      id: order._id,
      restaurant: order.restaurantId?.name,
      status: order.status,
      total: order.pricing?.total
    });

    res.json({
      success: true,
      data: { order }
    });

  } catch (error) {
    console.error('Erreur getOrderById:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration de la commande'
    });
  }
};

/**
 * Cr√©er une nouvelle commande - VERSION CORRIG√âE
 * POST /orders
 */
exports.createOrder = async (req, res) => {
  try {
    console.log('üîÑ createOrder appel√© par:', req.user?.email);
    console.log('üîÑ Body re√ßu:', JSON.stringify(req.body, null, 2));
    
    // Validation restaurant utilisateur OBLIGATOIRE
    if (!validateUserRestaurant(req, res)) {
      return;
    }
    
    let { 
      floorPlanId, 
      tableNumber, 
      tableId, 
      customer, 
      items, 
      priority = 'normal',
      notes = '' 
    } = req.body;
    
    // === VALIDATIONS BASIQUES ===
    if (!customer) {
      return res.status(400).json({
        success: false,
        message: 'Informations client requises',
        field: 'customer'
      });
    }
    
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Au moins un √©l√©ment doit √™tre command√©',
        field: 'items'
      });
    }
    
    // === VALIDATION ET NORMALISATION CLIENT ===
    let normalizedCustomer;
    if (customer.firstName && customer.lastName) {
      normalizedCustomer = {
        firstName: customer.firstName.trim(),
        lastName: customer.lastName.trim(),
        email: customer.email?.trim() || '',
        phone: customer.phone?.trim() || '',
        notes: customer.notes?.trim() || ''
      };
    } else if (customer.name) {
      const nameParts = customer.name.trim().split(' ');
      normalizedCustomer = {
        firstName: nameParts[0] || 'Client',
        lastName: nameParts.slice(1).join(' ') || '',
        email: customer.email?.trim() || '',
        phone: customer.phone?.trim() || '',
        notes: customer.notes?.trim() || ''
      };
      console.log('üîÑ Nom client normalis√©:', normalizedCustomer);
    } else {
      return res.status(400).json({
        success: false,
        message: 'Nom du client requis (name ou firstName/lastName)',
        field: 'customer.name'
      });
    }
    
    // === VALIDATION FLOORPLAN ===
    if (floorPlanId) {
      console.log('üó∫Ô∏è Validation floorPlanId fourni:', floorPlanId);
      
      const providedPlan = await FloorPlan.findById(floorPlanId);
      if (!providedPlan) {
        return res.status(400).json({
          success: false,
          message: 'Plan de salle non trouv√©',
          field: 'floorPlanId'
        });
      }
      
      if (providedPlan.restaurantId.toString() !== req.user.restaurantId.toString()) {
        return res.status(403).json({
          success: false,
          message: 'Plan de salle non autoris√© pour ce restaurant',
          field: 'floorPlanId'
        });
      }
      
      console.log('‚úÖ FloorPlan valid√©:', providedPlan.name);
    } else {
      console.log('üó∫Ô∏è Aucun floorPlanId fourni, recherche du plan par d√©faut...');
      
      const defaultPlan = await FloorPlan.findOne({ 
        restaurantId: req.user.restaurantId,
        isDefault: true,
        isActive: true
      });
      
      if (defaultPlan) {
        floorPlanId = defaultPlan._id;
        console.log(`‚úÖ Plan par d√©faut utilis√©: ${defaultPlan.name}`);
      } else {
        // Si aucun plan par d√©faut, prendre le premier plan actif
        const firstActivePlan = await FloorPlan.findOne({ 
          restaurantId: req.user.restaurantId,
          isActive: true
        });
        
        if (firstActivePlan) {
          floorPlanId = firstActivePlan._id;
          console.log(`‚úÖ Premier plan actif utilis√©: ${firstActivePlan.name}`);
        } else {
          return res.status(400).json({
            success: false,
            message: 'Aucun plan de salle disponible. Veuillez cr√©er un plan de salle.',
            code: 'NO_FLOOR_PLAN_AVAILABLE'
          });
        }
      }
    }
    
    // === VALIDATION ET TRAITEMENT DES ITEMS ===
    let subtotal = 0;
    const processedItems = [];
    
    console.log('üîÑ Validation de', items.length, 'items...');
    
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      
      if (!item.menuItem || !item.quantity || item.quantity <= 0) {
        return res.status(400).json({
          success: false,
          message: `Item ${i + 1} invalide: menuItem et quantity requis`,
          field: `items[${i}]`
        });
      }
      
      // V√©rifier que le menuItem existe
      const menuItem = await MenuItem.findById(item.menuItem);
      if (!menuItem) {
        return res.status(400).json({
          success: false,
          message: `√âl√©ment de menu non trouv√©: ${item.menuItem}`,
          field: `items[${i}].menuItem`
        });
      }
      
      // V√©rifier que le menuItem appartient au bon restaurant
      if (menuItem.restaurantId.toString() !== req.user.restaurantId.toString()) {
        return res.status(403).json({
          success: false,
          message: `√âl√©ment de menu non autoris√© pour ce restaurant: ${menuItem.name}`,
          field: `items[${i}].menuItem`
        });
      }
      
      // V√©rifier que l'item est disponible
      if (!menuItem.isActive || !menuItem.availability?.isAvailable) {
        return res.status(400).json({
          success: false,
          message: `√âl√©ment de menu non disponible: ${menuItem.name}`,
          field: `items[${i}].menuItem`
        });
      }
      
      // Calculer le prix
      let itemPrice = item.price;
      if (!itemPrice) {
        // Utiliser le prix par d√©faut du menu
        if (menuItem.basePrice) {
          itemPrice = menuItem.basePrice;
        } else if (menuItem.defaultPrice?.price) {
          itemPrice = menuItem.defaultPrice.price;
        } else if (menuItem.priceVariants && menuItem.priceVariants.length > 0) {
          const defaultVariant = menuItem.priceVariants.find(v => v.isDefault) || menuItem.priceVariants[0];
          itemPrice = defaultVariant.price;
        } else {
          return res.status(400).json({
            success: false,
            message: `Prix non d√©fini pour l'√©l√©ment: ${menuItem.name}`,
            field: `items[${i}].price`
          });
        }
      }
      
      const itemTotal = itemPrice * item.quantity;
      
      processedItems.push({
        menuItem: item.menuItem,
        quantity: item.quantity,
        price: itemPrice,
        total: itemTotal,
        variants: item.variants || {},
        notes: item.notes || ''
      });
      
      subtotal += itemTotal;
      
      console.log(`‚úÖ Item ${i + 1} valid√©:`, {
        name: menuItem.name,
        quantity: item.quantity,
        price: itemPrice,
        total: itemTotal
      });
    }
    
    // === CALCUL DU PRICING ===
    const tax = Math.round(subtotal * 0.20 * 100) / 100; // TVA 20%
    const discount = 0; // Pas de remise par d√©faut
    const total = subtotal + tax - discount;
    
    const pricing = {
      subtotal: Math.round(subtotal * 100) / 100,
      tax: tax,
      discount: discount,
      total: Math.round(total * 100) / 100
    };
    
    console.log('üí∞ Pricing calcul√©:', pricing);
    
    // === GESTION DU NUM√âRO DE TABLE ===
    const finalTableNumber = tableNumber || tableId || `T${Date.now()}`;
    
    // === CR√âATION DE LA COMMANDE ===
    const newOrder = new Order({
      restaurantId: req.user.restaurantId,
      floorPlanId: floorPlanId,
      tableNumber: finalTableNumber,
      customer: normalizedCustomer,
      items: processedItems,
      status: 'pending',
      priority: priority,
      assignedServer: req.user._id,
      pricing: pricing,
      payment: {
        method: null,
        status: 'pending',
        transactionId: null
      },
      timestamps: {
        ordered: new Date()
      },
      notes: notes
    });
    
    const savedOrder = await newOrder.save();
    
    // Peupler les r√©f√©rences pour la r√©ponse
    await savedOrder.populate([
      { path: 'items.menuItem', select: 'name category' },
      { path: 'assignedServer', select: 'firstName lastName' },
      { path: 'restaurantId', select: 'name' },
      { path: 'floorPlanId', select: 'name' }
    ]);
    
    console.log('‚úÖ Commande cr√©√©e avec succ√®s:', {
      id: savedOrder._id,
      customer: `${normalizedCustomer.firstName} ${normalizedCustomer.lastName}`,
      items: processedItems.length,
      total: pricing.total,
      table: finalTableNumber
    });
    
    res.status(201).json({
      success: true,
      message: 'Commande cr√©√©e avec succ√®s',
      data: { order: savedOrder }
    });
    
  } catch (error) {
    console.error('‚ùå Erreur createOrder:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la cr√©ation de la commande',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * Mettre √† jour le statut d'une commande
 * PATCH /orders/:id/status
 */
exports.updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, notes } = req.body;

    console.log('updateOrderStatus appel√© pour:', id, 'nouveau statut:', status);

    const validStatuses = ['pending', 'confirmed', 'preparing', 'ready', 'served', 'paid', 'cancelled'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: `Statut invalide. Statuts autoris√©s: ${validStatuses.join(', ')}`
      });
    }

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Commande non trouv√©e'
      });
    }

    // V√©rification permissions restaurant
    if (!hasRestaurantAccess(req, order.restaurantId)) {
      return res.status(403).json({
        success: false,
        message: 'Acc√®s non autoris√© √† cette commande'
      });
    }

    const oldStatus = order.status;
    order.status = status;

    // Mettre √† jour les timestamps selon le statut
    switch (status) {
      case 'confirmed':
        order.timestamps.confirmed = new Date();
        break;
      case 'preparing':
        order.timestamps.preparing = new Date();
        break;
      case 'ready':
        order.timestamps.ready = new Date();
        break;
      case 'served':
        order.timestamps.served = new Date();
        break;
      case 'paid':
        order.timestamps.paid = new Date();
        if (order.payment) {
          order.payment.status = 'completed';
        }
        break;
      case 'cancelled':
        order.timestamps.cancelled = new Date();
        break;
    }

    if (notes) {
      const timestamp = new Date().toLocaleString('fr-FR');
      const userName = `${req.user.firstName} ${req.user.lastName}`;
      order.notes = (order.notes || '') + `\n[${timestamp}] ${userName}: ${notes}`;
    }

    await order.save();

    console.log('‚úÖ Statut commande mis √† jour:', { id, oldStatus, newStatus: status });

    res.json({
      success: true,
      message: `Statut de la commande chang√© vers "${status}"`,
      data: {
        order: {
          id: order._id,
          status: order.status,
          timestamps: order.timestamps,
          oldStatus
        }
      }
    });

  } catch (error) {
    console.error('Erreur updateOrderStatus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la mise √† jour du statut'
    });
  }
};

/**
 * R√©cup√©rer les commandes par table
 * GET /orders/table/:floorPlanId/:tableId
 */
exports.getOrdersByTable = async (req, res) => {
  try {
    const { floorPlanId, tableId } = req.params;
    const { status } = req.query;

    console.log('getOrdersByTable appel√©:', { floorPlanId, tableId, status });

    // Validation restaurant pour non-admin
    if (req.user.role !== 'admin' && !validateUserRestaurant(req, res)) {
      return;
    }

    // V√©rifier que le floorPlan appartient au restaurant
    const floorPlan = await FloorPlan.findById(floorPlanId);
    if (!floorPlan) {
      return res.status(404).json({
        success: false,
        message: 'Plan de salle non trouv√©'
      });
    }

    if (!hasRestaurantAccess(req, floorPlan.restaurantId)) {
      return res.status(403).json({
        success: false,
        message: 'Acc√®s non autoris√© √† ce plan de salle'
      });
    }

    const filter = {
      floorPlanId,
      tableNumber: tableId
    };

    if (req.user.role !== 'admin') {
      filter.restaurantId = req.user.restaurantId;
    }

    if (status) {
      filter.status = status;
    }

    const orders = await Order.find(filter)
      .populate('items.menuItem', 'name category basePrice')
      .populate('assignedServer', 'firstName lastName')
      .sort({ 'timestamps.ordered': -1 });

    console.log('Commandes trouv√©es pour table:', orders.length);

    res.json({
      success: true,
      data: { orders }
    });

  } catch (error) {
    console.error('Erreur getOrdersByTable:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des commandes par table'
    });
  }
};

/**
 * Traiter le paiement d'une commande
 * POST /orders/:id/payment
 */
exports.processPayment = async (req, res) => {
  try {
    const { id } = req.params;
    const { method, amount, transactionId } = req.body;

    console.log('processPayment appel√© pour:', id, 'm√©thode:', method);

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Commande non trouv√©e'
      });
    }

    // V√©rification permissions restaurant
    if (!hasRestaurantAccess(req, order.restaurantId)) {
      return res.status(403).json({
        success: false,
        message: 'Acc√®s non autoris√© √† cette commande'
      });
    }

    // V√©rifications
    if (order.payment?.status === 'completed') {
      return res.status(400).json({
        success: false,
        message: 'Cette commande est d√©j√† pay√©e'
      });
    }

    if (order.status !== 'served' && order.status !== 'ready') {
      return res.status(400).json({
        success: false,
        message: 'La commande doit √™tre servie avant le paiement'
      });
    }

    const expectedAmount = order.pricing?.total || 0;
    if (amount && Math.abs(amount - expectedAmount) > 0.01) {
      return res.status(400).json({
        success: false,
        message: `Montant incorrect. Attendu: ${expectedAmount}‚Ç¨, re√ßu: ${amount}‚Ç¨`
      });
    }

    // Traiter le paiement
    order.payment = {
      method: method || 'cash',
      status: 'completed',
      transactionId: transactionId || `PAY_${Date.now()}`,
      amount: expectedAmount,
      processedAt: new Date(),
      processedBy: req.user._id
    };

    order.status = 'paid';
    order.timestamps.paid = new Date();

    await order.save();

    console.log('‚úÖ Paiement trait√©:', { id, method, amount: expectedAmount });

    res.json({
      success: true,
      message: 'Paiement trait√© avec succ√®s',
      data: {
        order: {
          id: order._id,
          status: order.status,
          payment: order.payment,
          total: expectedAmount
        }
      }
    });

  } catch (error) {
    console.error('Erreur processPayment:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors du traitement du paiement'
    });
  }
};

/**
 * Statistiques des commandes
 * GET /orders/statistics/summary
 */
exports.getOrderStatistics = async (req, res) => {
  try {
    const { period = 'today', restaurantId } = req.query;

    console.log('getOrderStatistics appel√©:', { period, restaurantId, userRole: req.user.role });

    // Validation restaurant pour non-admin
    if (req.user.role !== 'admin' && !validateUserRestaurant(req, res)) {
      return;
    }

    let dateFilter = {};
    const now = new Date();

    switch (period) {
      case 'today':
        const startOfDay = new Date(now);
        startOfDay.setHours(0, 0, 0, 0);
        const endOfDay = new Date(now);
        endOfDay.setHours(23, 59, 59, 999);
        dateFilter = { $gte: startOfDay, $lte: endOfDay };
        break;
      case 'week':
        const startOfWeek = new Date(now);
        startOfWeek.setDate(now.getDate() - 7);
        dateFilter = { $gte: startOfWeek };
        break;
      case 'month':
        const startOfMonth = new Date(now);
        startOfMonth.setDate(now.getDate() - 30);
        dateFilter = { $gte: startOfMonth };
        break;
    }

    const filter = { 'timestamps.ordered': dateFilter };
    if (req.user.role !== 'admin') {
      filter.restaurantId = req.user.restaurantId;
    } else if (restaurantId) {
      filter.restaurantId = restaurantId;
    }

    const stats = await Order.aggregate([
      { $match: filter },
      {
        $group: {
          _id: null,
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$pricing.total' },
          averageOrderValue: { $avg: '$pricing.total' },
          statusBreakdown: {
            $push: '$status'
          }
        }
      }
    ]);

    const statusCounts = {};
    if (stats[0]?.statusBreakdown) {
      stats[0].statusBreakdown.forEach(status => {
        statusCounts[status] = (statusCounts[status] || 0) + 1;
      });
    }

    const result = stats[0] || {
      totalOrders: 0,
      totalRevenue: 0,
      averageOrderValue: 0
    };

    console.log('Statistiques calcul√©es:', {
      totalOrders: result.totalOrders,
      totalRevenue: result.totalRevenue,
      period
    });

    res.json({
      success: true,
      data: {
        period,
        statistics: {
          totalOrders: result.totalOrders,
          totalRevenue: Math.round((result.totalRevenue || 0) * 100) / 100,
          averageOrderValue: Math.round((result.averageOrderValue || 0) * 100) / 100,
          statusBreakdown: statusCounts
        },
        filter: req.user.role === 'admin' ? 'ALL_RESTAURANTS' : 'USER_RESTAURANT'
      }
    });

  } catch (error) {
    console.error('Erreur getOrderStatistics:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des statistiques'
    });
  }
};

module.exports = exports;