console.log('üß™ Test API Zengest - Version simple sans curl\n');

const API_BASE = 'http://localhost:3000/api';

const testAPI = async () => {
  try {
    // Test 1: Connexion
    console.log('üîê Test connexion...');
    
    const loginResponse = await fetch(`${API_BASE}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'admin@zengest.com',
        password: 'Admin123!'
      })
    });
    
    console.log('Status:', loginResponse.status);
    
    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.error('‚ùå Erreur HTTP:', loginResponse.status);
      console.error('Response:', errorText);
      return;
    }
    
    const loginData = await loginResponse.json();
    
    if (!loginData.success) {
      console.error('‚ùå Erreur connexion:', loginData.message);
      return;
    }
    
    console.log('‚úÖ Connexion r√©ussie !');
    console.log('üë§ Utilisateur:', loginData.data.user.firstName, loginData.data.user.lastName);
    console.log('üé≠ R√¥le:', loginData.data.user.role);
    console.log('üîë Token obtenu:', loginData.data.token.substring(0, 30) + '...');
    
    // Test 2: Email de test
    console.log('\nüìß Test email via Brevo...');
    
    const emailResponse = await fetch(`${API_BASE}/notifications/test`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${loginData.data.token}`
      },
      body: JSON.stringify({
        email: 'duc.son.nguyen48l@gmail.com'
      })
    });
    
    console.log('Status email:', emailResponse.status);
    
    const emailData = await emailResponse.json();
    
    if (emailData.success) {
      console.log('‚úÖ Email envoy√© avec succ√®s via Brevo !');
      console.log('üìß Message ID:', emailData.messageId || 'N/A');
      console.log('üì¨ V√©rifiez votre Gmail : duc.son.nguyen48l@gmail.com');
      console.log('\nüéâ SYST√àME COMPLET FONCTIONNEL !');
      
      console.log('\nüìä R√©sum√©:');
      console.log('‚úÖ Authentification JWT : OK');
      console.log('‚úÖ Email Brevo : OK');
      console.log('‚úÖ API Zengest : OK');
      console.log('üåê Dashboard Brevo : https://app.brevo.com');
      
    } else {
      console.error('‚ùå Erreur email:', emailData.message);
      
      if (emailData.message.includes('non configur√©')) {
        console.log('\nüí° Probl√®me configuration email:');
        console.log('1. V√©rifiez votre .env (Brevo)');
        console.log('2. Red√©marrez le serveur');
      }
    }
    
    // Test 3: Informations utilisateur
    console.log('\nüë§ Test informations utilisateur...');
    
    const meResponse = await fetch(`${API_BASE}/auth/me`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${loginData.data.token}`
      }
    });
    
    const meData = await meResponse.json();
    
    if (meData.success) {
      console.log('‚úÖ Profil utilisateur r√©cup√©r√©');
      console.log('üìß Email:', meData.data.user.email);
      console.log('üè¢ Restaurant:', meData.data.user.restaurantId?.name || 'N/A');
      console.log('üîê Permissions:', meData.data.permissions?.length || 0, 'permissions');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur r√©seau:', error.message);
    console.log('\nüí° V√©rifications:');
    console.log('1. Serveur d√©marr√© ? npm run dev');
    console.log('2. Port 3000 disponible ?');
    console.log('3. Configuration .env correcte ?');
  }
};

// Fonction pour installer node-fetch si n√©cessaire
const checkAndInstallFetch = () => {
  try {
    require('node-fetch');
  } catch (error) {
    console.log('‚ö†Ô∏è  node-fetch non install√©, utilisation de fetch natif');
    
    // Pour Node.js 18+ qui a fetch int√©gr√©
    if (typeof fetch === 'undefined') {
      console.error('‚ùå fetch non disponible. Installez node-fetch :');
      console.log('npm install node-fetch');
      process.exit(1);
    }
  }
};

// V√©rifier fetch et lancer le test
checkAndInstallFetch();
testAPI();