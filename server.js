require('dotenv').config();
const app = require('./app');
const connectDB = require('./src/config/database');
const config = require('./src/config/config');

// Fonction pour d√©marrer le serveur
const startServer = async () => {
  try {
    // Connexion √† la base de donn√©es
    await connectDB();
    
    // D√©marrage du serveur
    const PORT = config.port;
    const server = app.listen(PORT, () => {
      console.log(`
üöÄ Serveur Restaurant Backend d√©marr√© !
üìç Mode: ${config.nodeEnv}
üåê Port: ${PORT}
üîó URL: http://localhost:${PORT}
üìä Health Check: http://localhost:${PORT}/api/health
üìö API Base: http://localhost:${PORT}/api
      `);
    });
    
    // Gestion de l'arr√™t propre du serveur
    const gracefulShutdown = (signal) => {
      console.log(`\n${signal} re√ßu. Arr√™t propre du serveur...`);
      server.close(() => {
        console.log('Serveur ferm√©.');
        process.exit(0);
      });
    };
    
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
    
    return server;
    
  } catch (error) {
    console.error('Erreur lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
};

// Gestion des erreurs non g√©r√©es
process.on('unhandledRejection', (err, promise) => {
  console.error('Erreur non g√©r√©e d√©tect√©e:', err.message);
  console.error('Promise rejet√©e:', promise);
  process.exit(1);
});

process.on('uncaughtException', (err) => {
  console.error('Exception non g√©r√©e d√©tect√©e:', err.message);
  console.error('Stack:', err.stack);
  process.exit(1);
});

// D√©marrer le serveur
startServer();